vocabulary V {
	type Color
	type Country
	color(Country, Color)
	neighbor(Country, Country)
}

theory T0:V {
	!Country2[Country] Color3[Color] Country4[Country] Country1[Country]: ((neighbor(Country1, Country2) & color(Country1, Color3) & neighbor(Country4, Country2) & (Country1 ~= Country2) & (Country1 ~= Country4) & (Country2 ~= Country4)) => false).
}

structure S0:V {
	Color = {Green; Red}
	Country = {Germany; Poland; Belgium}
	neighbor = {(Germany, Poland); (Belgium, Germany); (Germany, Belgium); (Poland, Germany)}
	color = {(Germany, Green); (Belgium, Red); (Poland, Red)}
}

structure S1:V {
	Color = {Red; Blue; Green}
	Country = {Germany; Lux; Belgium}
	neighbor = {(Lux, Germany); (Belgium, Lux); (Germany, Lux); (Lux, Belgium); (Germany, Belgium); (Belgium, Germany)}
	color = {(Lux, Green); (Belgium, Red); (Germany, Blue)}
}

procedure main() {
// Arguments
// 0: Theory
// 1: Structure

function isValid(t, s)
    stdoptions.nbmodels = 1 // Set to search for all models
    allsols = modelexpand(t, s) // Find all models

    local count = 0
    for _ in pairs(allsols) do count = count + 1 end

    if count ~= 1 then
    	return false
    else
    	// A model was found
    	return true
    end
end
if true and isValid(T0, S0) and isValid(T0, S1) then
	print("YES")
else
	print("NO")
end
print("")
}
