vocabulary V {
	type Color
	type Country
	color(Country, Color)
	neighbor(Country, Country)
	n(Country, Country)
}

theory T0:V {
	/*{
		n(x, y) <- neighbor(x, y) & x ~= y.
		n(y, x) <- neighbor(x, y) & x ~= y.
	}*/
	!x y: x ~= y & neighbor(x, y) => n(x, y).
	!x y: x ~= y & neighbor(x, y) => n(y, x).
}

structure S0:V {
	Color = {Green; Red}
	Country = {Germany; Poland; Belgium}
	neighbor = {(Germany, Poland); (Belgium, Germany)}
	color = {(Germany, Green); (Belgium, Red); (Poland, Red)}
}

/*structure S1:V {
	Color = {Red; Blue; Green}
	Country = {Germany; Lux; Belgium}
	neighbor = {(Lux, Germany); (Belgium, Lux); (Germany, Lux); (Lux, Belgium); (Germany, Belgium); (Belgium, Germany)}
	color = {(Lux, Green); (Belgium, Red); (Germany, Blue)}
}*/

procedure main() {
// Arguments
// 0: Theory
// 1: Structure

function isValid(t, s)
    stdoptions.nbmodels = 1 // Set to search for all models
    allsols = modelexpand(t, s) // Find all models

    printmodels(allsols)

    local count = 0
    for _ in pairs(allsols) do count = count + 1 end

    if count ~= 1 then
    	return false
    else
    	// A model was found
    	return true
    end
end
if true and isValid(T0, S0) /*and isValid(T0, S1)*/ then
	print("YES")
else
	print("NO")
end
print("")
}
