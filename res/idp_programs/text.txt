vocabulary V {
	type number isa int
	gap(number, number, number)
	position(number, number)
}

theory T0:V {
	!number3[number] number1[number] number2[number]: ((position(number1, number2) & position(number3, number2) & (number1 ~= number2) & (number1 ~= number3) & (number2 ~= number3)) => false).
}

structure S0:V {
	number = {3; 2; 0; 1; 4}
	position = {(3, 1); (4, 3); (2, 4); (1, 2)}
}

structure S1:V {
	number = {2; 4; 1; 0; 3}
	position = {(3, 4); (4, 2); (1, 3); (2, 1)}
}

structure S2:V {
	number = {2; 0; 4; 1; 3; 5}
	position = {(1, 2); (4, 3); (2, 4); (5, 5); (3, 1)}
}

theory B : V {
	{
		! i : gap(i, i, 0).
		! i1 i2 : gap(i1, i2, i2 - i1) <- i1 < i2.
		! i1 i2 d : gap(i2, i1, d) <- gap(i1, i2, d).
	}
    ! i : gap(i, i, 0).
    ! i1 i2 : i1 < i2 => gap(i1, i2, i2 - i1).
    ! i1 i2 : i1 > i2 => gap(i1, i2, i1 - i2).
}

procedure main() {
// Arguments
// 0: Theory
// 1: Structure

function isValid(t, s)
    stdoptions.nbmodels = 1 // Set to search for all models
    allsols = modelexpand(t, s) // Find all models

    local count = 0
    for _ in pairs(allsols) do count = count + 1 end

    if count ~= 1 then
    	return false
    else
    	// A model was found
    	return true
    end
end
t0 = merge(B, T0)
if true and isValid(t0, S0) /*and isValid(t0, S1) and isValid(t0, S2)*/ then
	print("YES")
else
	print("NO")
end
print("")
}
